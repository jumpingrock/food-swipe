{"version":3,"sources":["location.js","feature/nav.js","feature/places.js","App.js","serviceWorker.js","index.js"],"names":["map","Nav","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleOpen","setState","isOpen","handleClose","state","react_default","a","createElement","class","id","type","data-toggle","data-target","aria-controls","aria-expanded","aria-label","Component","fillLocation","Promise","resolve","reject","navigator","geolocation","getCurrentPosition","result","console","log","coords","latitude","longitude","window","google","maps","LatLng","error","enableHighAccuracy","_callee","callback","pyrmont","regenerator_default","wrap","_context","prev","next","sent","Map","document","getElementById","center","zoom","stop","initMap","Place","results","post","undefined","photos","length","name","photo","getUrl","className","src","alt","vicinity","user_ratings_total","rating","price_level","App","nextResultHandler","that","assertThisInitialized","places","PlacesService","nearbySearch","location","rankBy","RankBy","DISTANCE","keyword","opennow","pagetoken","nextpage","status","pagination","nextPage","A","prevState","scrolling","concat","toConsumableArray","p","recallAPI","scrollHandler","event","lastDiv","querySelector","lastDivOffset","offsetTop","clientHeight","pageYOffset","innerHeight","componentDidMount","scrollListener","addEventListener","maxprice","searchby","nav","Boolean","hostname","match","ReactDOM","render","src_App_0","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.023fadb1.chunk.js","sourcesContent":["// import React from 'react';\r\n// const API_KEY = process.env.REACT_APP_API_KEY;\r\n\r\nconst fillLocation = () => {\r\n  let location = new Promise(function (resolve, reject) {\r\n    navigator.geolocation.getCurrentPosition(\r\n      \r\n      function (result) {\r\n        console.log(result)\r\n        console.log(result.coords.latitude, result.coords.longitude)\r\n        resolve(new window.google.maps.LatLng(result.coords.latitude, result.coords.longitude))\r\n      }, \r\n      function (error) { \r\n        console.log(\"getCurrentPosition Error\", error)\r\n        \r\n       },\r\n      {enableHighAccuracy: true}\r\n    )\r\n  })\r\n  \r\n  return location;\r\n}\r\n// This example requires the Places library. Include the libraries=places\r\n// parameter when you first load the API. For example:\r\n\r\nvar map;\r\nasync function initMap(callback) {\r\n  // Create the map.\r\n  var pyrmont = await fillLocation()\r\n  console.log(pyrmont)\r\n  map = new window.google.maps.Map(document.getElementById('map'), {\r\n    center: pyrmont,\r\n    zoom: 17\r\n\r\n  });\r\n  \r\n  callback(map, pyrmont);\r\n}\r\n\r\n\r\nexport default initMap;\r\n","import React,{Component} from 'react';\r\n\r\n// class sideNav extends Component{\r\n  \r\n// }\r\nclass Nav extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = { isOpen: false }\r\n      }\r\n    \r\n      handleOpen = () => {\r\n        this.setState({ isOpen: true })\r\n      }\r\n    \r\n      handleClose = () => {\r\n         this.setState({ isOpen: false })\r\n      }\r\n    \r\n      render() {\r\n        return (\r\n           <div class=\"pos-f-t\">\r\n                <div class=\"collapse\" id=\"navbarToggleExternalContent\">\r\n                <div class=\"bg-dark p-4\">\r\n                <h5 class=\"text-white\">Collapsed content</h5>\r\n                <h5 class=\"text-white\">Popular choice of this area</h5>\r\n                <h5 class=\"text-white\">About us</h5>\r\n                {/* <span class=\"text-muted\">Please hire me!</span> */}\r\n                </div>\r\n            </div>\r\n            <nav class=\"navbar navbar-dark bg-dark\" id='title'><b>Food-swipe!</b>\r\n                <button class=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarToggleExternalContent\" aria-controls=\"navbarToggleExternalContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n                <span class=\"navbar-toggler-icon\"></span>\r\n                </button>\r\n            </nav>\r\n            </div>\r\n        )\r\n      }\r\n    }\r\nexport default Nav;","import React from 'react'\r\n\r\nconst Place = (props) => {\r\n\r\n    let result = props.results.map(post => {\r\n        \r\n        if (post.photos !== undefined && post.photos.length > 0 ) {\r\n            console.log(post.name)\r\n            // console.log(i, post)\r\n            // console.log(post.rating)\r\n            // console.log(post.price_level)\r\n            // console.log(post.photos[0].getUrl())\r\n            let photo = post.photos[0].getUrl()\r\n            return (\r\n                <div className=\"boxes\">\r\n                    <div className=\"place\">\r\n                        <img src={photo} alt={post.name} className='img-fluid'/><br />\r\n                    </div>\r\n                    <h3>{post.name}</h3>\r\n                    <h5>{post.vicinity}</h5>\r\n                    <h5>Rating ({post.user_ratings_total}): {post.rating}</h5>\r\n                    <h5>Price: {post.price_level}</h5>\r\n                </div>\r\n                \r\n            )\r\n        } else {\r\n            \r\n            return null\r\n            \r\n        }\r\n    });\r\n    return result\r\n}\r\nexport default Place;","import React, { Component } from 'react';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport './App.css';\nimport Nav from './feature/nav.js'\nimport initMap from './location.js'\nimport Place from './feature/places.js'\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      nextPage: \"\",\n      recallAPI: true,\n      results: [],\n      opennow: true,\n      maxprice: 0,\n      pagetoken: true,\n      searchby: \"radius\",\n      scrolling: false,\n      \n    }\n  }\n\n  nextResultHandler = () => {\n    let that = this\n    //library to googles API is nested in index.html\n    const nearby = (map, pyrmont) => {\n      // console.log(\"hello world\")\n      var service = new window.google.maps.places.PlacesService(map);\n      service.nearbySearch(\n        { location: pyrmont, rankBy: window.google.maps.places.RankBy.DISTANCE, keyword: ['restaurant'], opennow: true, pagetoken: that.state.nextpage },\n        // if (this.state.searchby == \"radius\"){\n        // }\n        // { location: pyrmont, radius: 200, keyword: ['restaurant'], opennow: this.state.opennow, maxprice: this.state.maxprice, pagetoken: this.state.nextPage },\n        function (results, status, pagination) {\n          if(that.state.results.length <= 0){\n            that.setState({ results: results,nextPage: pagination.A  })\n          }else{\n            that.setState(function(prevState)  {\n              return {\n            \n                nextPage: pagination.A,\n                scrolling: false,\n                results: [...prevState.results,...results]\n              }\n              \n            },()=>{\n              let p = that.state.recallAPI\n              if (that.state.recallAPI === true ){\n                pagination.nextPage()\n                that.setState({recallAPI: !p})\n              }\n              })\n          \n            }\n        });\n    }\n    initMap(nearby);\n  }\n  scrollHandler = (event) =>{\n    // console.log(\"this is running\")\n    const {scrolling} =this.state\n    if (scrolling) return\n    const lastDiv = document.querySelector('#end')\n    const lastDivOffset = lastDiv.offsetTop + lastDiv.clientHeight\n    const pageOffset = window.pageYOffset + window.innerHeight\n    const bottomOffset = 1\n    if(pageOffset > lastDivOffset - bottomOffset) {\n      // console.log(\"this is from scollhandler\")\n      // this.nextResultHandler();\n      this.setState({scrolling: true}, this.nextResultHandler);\n    }\n  }\n\n  componentDidMount = () => {\n    this.nextResultHandler()\n    this.scrollListener = window.addEventListener('scroll',(event) =>{\n      this.scrollHandler(event)\n    })\n  }\n  render() {\n\n    console.log(this.state.results.length)\n    return (\n      <div > \n        <Nav/>\n        \n        <div class=\"container\" >\n              \n            <div class=\"row\" >\n                \n              <div class=\"col-sm-2\" >\n                \n              </div>\n              <div class=\"col-xl\" >\n                <br/>\n                <Place results={this.state.results} />\n              </div>\n              <div class=\"col-sm-2\" >\n                \n              </div>\n            </div>\n            <div id=\"end\"></div>\n          </div>\n\n    </div>\n      \n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport Nav from './feature/nav.js'\nimport * as serviceWorker from './serviceWorker';\n\n// ReactDOM.render(<Nav />, document.getElesmentById('nav'));\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}